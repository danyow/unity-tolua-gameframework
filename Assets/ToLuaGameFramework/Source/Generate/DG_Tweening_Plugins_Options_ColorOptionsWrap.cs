//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class DG_Tweening_Plugins_Options_ColorOptionsWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(DG.Tweening.Plugins.Options.ColorOptions), null);
		L.RegFunction("Reset", Reset);
		L.RegFunction("New", _CreateDG_Tweening_Plugins_Options_ColorOptions);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("alphaOnly", get_alphaOnly, set_alphaOnly);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateDG_Tweening_Plugins_Options_ColorOptions(IntPtr L)
	{
		DG.Tweening.Plugins.Options.ColorOptions obj = new DG.Tweening.Plugins.Options.ColorOptions();
		ToLua.PushValue(L, obj);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Reset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DG.Tweening.Plugins.Options.ColorOptions obj = (DG.Tweening.Plugins.Options.ColorOptions)ToLua.CheckObject(L, 1, typeof(DG.Tweening.Plugins.Options.ColorOptions));
			obj.Reset();
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_alphaOnly(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DG.Tweening.Plugins.Options.ColorOptions obj = (DG.Tweening.Plugins.Options.ColorOptions)o;
			bool ret = obj.alphaOnly;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index alphaOnly on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_alphaOnly(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DG.Tweening.Plugins.Options.ColorOptions obj = (DG.Tweening.Plugins.Options.ColorOptions)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.alphaOnly = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index alphaOnly on a nil value");
		}
	}
}

